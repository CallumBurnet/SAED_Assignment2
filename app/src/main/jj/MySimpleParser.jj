PARSER_BEGIN(MySimpleParser)
package org.example;

public class MySimpleParser {
    public static void main(String[] args) throws ParseException {
        MySimpleParser parser = new MySimpleParser(System.in);
        parser.parseGameConfig();
        System.out.println("Parsed successfully.");
    }
}

PARSER_END(MySimpleParser)

// Skip spaces, newlines, and carriage returns
SKIP: { " " | "\n" | "\r" }

// Tokens for the new keywords and parentheses
TOKEN: {
    < SIZE: "size" > |
    < START: "start" > |
    < GOAL: "goal" > |
    < OBSTACLE: "obstacle" > |
    < ITEM: "item" > |
    < PLUGIN: "plugin" > |
    < SCRIPT: "script" > |
    < REQUIRES: "requires" > |
    < MESSAGE: "message" > |
    < STRING_LITERAL: "\"" (~["\""])* "\"" > |
    < EXCLAMATION: "!" > |
    < BRACE_OPEN: "{" > |
    < BRACE_CLOSE: "}" > |
    < LPAREN: "(" > |
    < RPAREN: ")" > |
    < COMMA: "," > |
    < NUMBER: (["0"-"9"])+ >
}

// Method to parse the full configuration
void parseGameConfig() :
{}
{
    sizeConfig() startConfig() goalConfig() (obstacleConfig() | itemConfig() | pluginConfig() | scriptConfig())* <EOF>
}

// Method to parse size (width, height)
int[] sizeConfig() :
{
    Token width, height;
}
{
    <SIZE> <LPAREN> width=<NUMBER> <COMMA> height=<NUMBER> <RPAREN>
    {
        int parsedWidth = Integer.parseInt(width.image);
        int parsedHeight = Integer.parseInt(height.image);
        System.out.println("Parsed size: (" + parsedWidth + ", " + parsedHeight + ")");
        return new int[]{parsedWidth, parsedHeight}; // Return an array with width and height
    }
}

// Method to parse start (x, y)
int[] startConfig() :
{
    Token x, y;
}
{
    <START> <LPAREN> x=<NUMBER> <COMMA> y=<NUMBER> <RPAREN>
    {
        int startX = Integer.parseInt(x.image);
        int startY = Integer.parseInt(y.image);
        System.out.println("Parsed start: (" + startX + ", " + startY + ")");
        return new int[]{startX, startY}; // Return an array with x and y
    }
}

// Method to parse goal (x, y)
int[] goalConfig() :
{
    Token x, y;
}
{
    <GOAL> <LPAREN> x=<NUMBER> <COMMA> y=<NUMBER> <RPAREN>
    {
        int goalX = Integer.parseInt(x.image);
        int goalY = Integer.parseInt(y.image);
        System.out.println("Parsed goal: (" + goalX + ", " + goalY + ")");
        return new int[]{goalX, goalY}; // Return an array with x and y
    }
}

// Method to parse obstacles
void obstacleConfig() :
{
    Token x, y;
}
{
    <OBSTACLE> <BRACE_OPEN> "at" <LPAREN> x=<NUMBER> <COMMA> y=<NUMBER> <RPAREN> ("," <LPAREN> x=<NUMBER> <COMMA> y=<NUMBER> <RPAREN>)* <REQUIRES> <STRING_LITERAL> <BRACE_CLOSE>
    {
        System.out.println("Parsed obstacle at (" + x.image + ", " + y.image + ")");
    }
}

// Method to parse items
void itemConfig() :
{
    Token itemName, x, y, message;
}
{
    <ITEM> itemName=<STRING_LITERAL> <BRACE_OPEN> "at" <LPAREN> x=<NUMBER> <COMMA> y=<NUMBER> <RPAREN> ("," <LPAREN> x=<NUMBER> <COMMA> y=<NUMBER> <RPAREN>)* <MESSAGE> message=<STRING_LITERAL> <BRACE_CLOSE>
    {
        System.out.println("Parsed item: " + itemName.image + " at (" + x.image + ", " + y.image + ") with message: " + message.image);
    }
}

// Method to parse plugins
void pluginConfig() :
{
    Token pluginName;
}
{
    <PLUGIN> pluginName=<STRING_LITERAL>
    {
        System.out.println("Parsed plugin: " + pluginName.image);
    }
}

// Method to parse scripts
void scriptConfig() :
{
    Token scriptContent;
}
{
    <SCRIPT> <EXCLAMATION> <BRACE_OPEN> scriptContent=<STRING_LITERAL> <BRACE_CLOSE>
    {
        System.out.println("Parsed script: " + scriptContent.image);
    }
}
