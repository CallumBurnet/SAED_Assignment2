PARSER_BEGIN(MySimpleParser)
package org.example;
import java.util.Map;
import java.util.HashMap;
import java.util.List;
import java.util.ArrayList;

public class MySimpleParser {
    Map<String, ArrayList<int[]>> obstacleMap = new HashMap();
    public static void main(String[] args) throws ParseException {
        MySimpleParser parser = new MySimpleParser(System.in);
        
        GameConfig config =new GameConfig();
        //parser.parseGameConfig(config);
        System.out.println("Parsed successfully.");
    }
    public GameConfig parseGameConfig() throws ParseException {
        GameConfig config = new GameConfig();
        parseGameConfig(config);  // Populate the config instance
        return config;
    }
}

PARSER_END(MySimpleParser)

// Skip spaces, newlines, and carriage returns
SKIP: { " " | "\n" | "\r" }

// Tokens for the new keywords and parentheses
TOKEN: {
    < SIZE: "size" > |
    < START: "start" > |
    < GOAL: "goal" > |
    < OBSTACLE: "obstacle" > |
    < ITEM: "item" > |
    < PLUGIN: "plugin" > |
    < AT: "at" > | 
    < SCRIPT: "script" > |
    < REQUIRES: "requires" > |
    < MESSAGE: "message" > |
    < STRING_LITERAL: "\"" (~["\""])* "\"" > |
    < EXCLAMATION: "!" > |
    < BRACE_OPEN: "{" > |
    < BRACE_CLOSE: "}" > |
    < LPAREN: "(" > |
    < RPAREN: ")" > |
    < COMMA: "," > |
    <PLUGIN_NAME: (["a"-"z", "A"-"Z"])+ ("." (["a"-"z", "A"-"Z"])+)*>|
   // Captures everything until a closing brace "}"
    < NUMBER: (["0"-"9"])+ >

}

void parseGameConfig(GameConfig config) :
{}
{
    (
        sizeConfig(config) |
        startConfig(config) |
        goalConfig(config) |
        obstacleConfig(config) |
        itemConfig(config)|
        pluginConfig(config)|
        scriptConfig(config)
    )* <EOF>
}







// Method to parse size (width, height)
void sizeConfig(GameConfig config) :
{
    Token width, height;
}
{
    <SIZE> <LPAREN> width=<NUMBER> <COMMA> height=<NUMBER> <RPAREN>
    {
        int parsedWidth = Integer.parseInt(width.image);
        int parsedHeight = Integer.parseInt(height.image);
        System.out.println("Parsed size: (" + parsedWidth + ", " + parsedHeight + ")");
        config.setSize(new int[]{parsedWidth, parsedHeight}); // Return an array with width and height
    }
}

// Method to parse start (x, y)
void startConfig(GameConfig config) :
{
    Token x, y;
}
{
    <START> <LPAREN> x=<NUMBER> <COMMA> y=<NUMBER> <RPAREN>
    {
        int startX = Integer.parseInt(x.image);
        int startY = Integer.parseInt(y.image);
        System.out.println("Parsed start: (" + startX + ", " + startY + ")");
        config.setStart(new int[]{startX, startY}); // Return an array with x and y
    }
}

// Method to parse goal (x, y)
void goalConfig(GameConfig config) :
{
    Token x, y;
}
{

    <GOAL> <LPAREN> x=<NUMBER> <COMMA> y=<NUMBER> <RPAREN>
    {
        int goalX = Integer.parseInt(x.image);
        int goalY = Integer.parseInt(y.image);
        System.out.println("Parsed goal: (" + goalX + ", " + goalY + ")");
        config.setGoal(new int[]{goalX, goalY});
    }
    
}

void obstacleConfig(GameConfig config) :
{
    Token x, y, requires;
    ArrayList<int[]> coords = new ArrayList();
}
{
    <OBSTACLE> <BRACE_OPEN>
    <AT> <LPAREN> x=<NUMBER> <COMMA> y=<NUMBER> <RPAREN>
    {
        // Add the first coordinate
        coords.add(new int[]{Integer.parseInt(x.image), Integer.parseInt(y.image)});
        System.out.println("Parsed obstacle at (" + x.image + ", " + y.image + ")");
    }
    // Loop to handle additional coordinates, if any
    ("," <LPAREN> x=<NUMBER> <COMMA> y=<NUMBER> <RPAREN>
    {
        coords.add(new int[]{Integer.parseInt(x.image), Integer.parseInt(y.image)});
        System.out.println("Parsed additional obstacle at (" + x.image + ", " + y.image + ")");
    })*
    <REQUIRES> requires=<STRING_LITERAL> <BRACE_CLOSE>
    {
        // Add the parsed coordinates to config with the requires key
        config.addObstacle(requires.image, coords);
        System.out.println("Requires: " + requires.image);
    }
}





    

void itemConfig(GameConfig config) :
{
    Token itemName, x, y, message;
    ArrayList<Item> items = new ArrayList();
}
{
    try {
        // Ensure at least one ITEM block is present
        ( 
            <ITEM> itemName=<STRING_LITERAL> 
            <BRACE_OPEN> 
                "at" <LPAREN> x=<NUMBER> <COMMA> y=<NUMBER> <RPAREN>
                {
                    System.out.println("CUH");
                    items.add(new Item(itemName.image, Integer.parseInt(x.image), Integer.parseInt(y.image), null,null));
                }
                ("," <LPAREN> x=<NUMBER> <COMMA> y=<NUMBER> <RPAREN>
                {
                    items.add(new Item(itemName.image, Integer.parseInt(x.image), Integer.parseInt(y.image), null, null));
                })* 
                <MESSAGE> message=<STRING_LITERAL> 
            <BRACE_CLOSE>
            {
                // Loop through the items and set the message for each item
                for (Item item : items) {
                    item.setMessage(message.image); 
                    config.addItem(item);
                }

            }
        )+
        {
            
            //return items; // Return the constructed itemMap
        }
    } catch (ParseException e) {
        System.out.println("L");
    }
}






// Method to parse plugins
void pluginConfig(GameConfig config) :
{
    Token pluginName;
}
{
    <PLUGIN> pluginName=<PLUGIN_NAME>
    {
        String parsedPlugin = pluginName.image; // Store the parsed plugin name
        System.out.println("Parsed plugin: " + parsedPlugin);
        config.addPlugin(parsedPlugin); // Return the parsed plugin name
    }
    
}



void scriptConfig(GameConfig config) :
{
    StringBuilder scriptContent = new StringBuilder();
}
{
    <SCRIPT> <EXCLAMATION> <BRACE_OPEN>
    {
    // Capture tokens until we reach the closing brace
    while (true) {
        Token currentToken = getNextToken();

        // Stop on the closing brace
        if (currentToken.kind == BRACE_CLOSE) {
            break;
        }

        // Append each tokenâ€™s image as part of the script content
        scriptContent.append(currentToken.image).append(" ");
    }

    // Add the captured script content to GameConfig and print it
    String fullScript = scriptContent.toString().trim();
    config.addScript(fullScript);
    System.out.println("Parsed script content:\n" + fullScript);
}
}














